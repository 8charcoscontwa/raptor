{
  "plugin_type": "php",
  "file_types": [
    ".php"
  ],
  "rules": [
    {
      "id": "PHPXSSSI",
      "severity": "Medium",
      "title": "Possible Cross Site Scripting",
      "description": "An attacker might execute arbitrary HTML/JavaScript Code in the clients browser context with this security  vulnerability. User tainted data is embedded into the HTML output by the application and rendered by the users browser, thus allowing  an attacker to embed and render malicious code. Preparing a malicious link will lead to an execution of this malicious code in another   users browser context when clicking the link. This can lead to local website defacement, phishing or cookie stealing and session  hijacking.",
      "remediation": "Encode all user tainted data with PHP built-in functions before embedding the data into the output. Make sure to set  the parameter ENT_QUOTES to avoid an eventhandler injections to existing HTML attributes and specify the correct charset.",
      "link": "https://www.owasp.org/index.php/XSS",
      "example_insecure": "<?php print('Hello ' . $_GET['name']); ?>",
      "example_secure": "<?php print('Hello ' . htmlentities($_GET['name'], ENT_QUOTES, 'utf-8'); ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Checks for reflection through dynamic argument concatenation in echo, print, print_r, exit, die, printf, vprintf",
      "signature": "KGVjaG98cHJpbnR8cHJpbnRfcnxleGl0fGRpZXwodilwcmludGYpKC4qKShbXHNdKlteXCJcJ10qXCRbXHddKik="
    },
    {
      "id": "PHPSQLSI",
      "severity": "Medium",
      "title": "Possible SQL Injection",
      "description": "An attacker might execute arbitrary SQL commands on the database server with this vulnerability. User tainted data is used when creating the database query that will be executed on the database management system (DBMS). An attacker can inject own SQL syntax thus initiate reading, inserting or deleting database entries or attacking the underlying operating system depending on the query, DBMS and configuration.",
      "remediation": "Always embed expected strings into quotes and escape the string with a PHP buildin function before embedding it to the query. Always embed expected integers without quotes and typecast the data to integer before embedding it to the query. Escaping data but embedding it without quotes is not safe.",
      "link": "https://www.owasp.org/index.php/SQL_Injection",
      "example_insecure": "<?php mysql_query('SELECT * FROM users WHERE id = ' . $_GET['id']); ?>",
      "example_secure": "Integer Type: <?php mysql_query('SELECT * FROM users WHERE id = ' . (int)$_GET['id']); String Type: mysql_query('SELECT * FROM users WHERE name = '' . mysql_real_escape_string($_GET['name']) . '''); ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of SQL keywords concatenated with, possibly unstrusted, dynamic content.",
      "signature": "KC4qW1wiXCddKSh1bmlvbnxzZWxlY3R8Y3JlYXRlfHJlbmFtZXx0cnVuY2F0ZXxsb2FkfGFsdGVyfGRlbGV0ZXx1cGRhdGV8aW5zZXJ0fGRlc2MpKCgoLipcLi4qKShcJF8oR0VUfFBPU1R8UkVRVUVTVClcWy4qXF0pKXwoKC4qKShpbnRvfGZyb218bGlrZXxoYXZpbmd8d2hlcmUpKC4qXC4uKikoXCRfKEdFVHxQT1NUfFJFUVVFU1QpXFsuKlxdKSkp"
    },
    {
      "id": "PHPHDRSI",
      "severity": "Medium",
      "title": "Possible HTTP Header Injection",
      "description": "An attacker can inject arbitrary headers to the HTTP response header. This can be abused for a redirect when injecting a 'Location:' header or help within a session fixation attack when the 'Set-Cookie:' header is added. Additionally, the HTTP response can be overwritten and JavaScript can be injected leading to Cross-Site Scripting attacks. In PHP version below 4.4.2 or 5.1.2 the characters \n\r (LF CR) can be used for header line termination (cross-browser). In PHP below 5.4 the character \r (CR) can still be used for header line termination (Chrome, IE).",
      "remediation": "Update PHP to prevent header injection or implement a whitelist. Additionally strip out control characters like %00, %0D, %0A etc.",
      "link": "https://www.owasp.org/index.php/HTTP_Response_Splitting",
      "example_insecure": "<?php header('Location: '.$_GET['url']); ?>",
      "example_secure": "<?php if(!in_array($_GET['url'], $whitelist)) exit; ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods responsible for setting HTTP headers concatenated with, possibly unstrusted, dynamic content.",
      "signature": "KGN1cmxfc2V0b3B0fGN1cmxfc2V0b3B0X2FycmF5fGN5cnVzX3F1ZXJ5fGVycm9yX2xvZ3xmc29ja29wZW58ZnRwX2NobW9kfGZ0cF9leGVjfGZ0cF9kZWxldGV8ZnRwX2ZnZXR8ZnRwX2dldHxmdHBfbmxpc3R8ZnRwX25iX2ZnZXR8ZnRwX25iX2dldHxmdHBfbmJfcHV0fGZ0cF9wdXR8Z2V0X2hlYWRlcnN8aW1hcF9vcGVufGltYXBfbWFpbHxtYWlsfG1iX3NlbmRfbWFpbHxsZGFwX2Nvbm5lY3R8bXNlc3Npb25fY29ubmVjdHxwZnNvY2tvcGVufHNlc3Npb25fcmVnaXN0ZXJ8c29ja2V0X2JpbmR8c29ja2V0X2Nvbm5lY3R8c29ja2V0X3NlbmR8c29ja2V0X3dyaXRlfHN0cmVhbV9zb2NrZXRfY2xpZW50fHN0cmVhbV9zb2NrZXRfc2VydmVyKS4qKFxcXCRbXHddKnxcJFtcd10qKQ=="
    },
    {
      "id": "PHPHRSSI",
      "severity": "Medium",
      "title": "Possible HTTP Response Splitting",
      "description": "An attacker can inject arbitrary headers to the HTTP response header. This can be abused for a redirect when injecting a 'Location:' header or help within a session fixation attack when the 'Set-Cookie:' header is added. Additionally, the HTTP response can be overwritten and JavaScript can be injected leading to Cross-Site Scripting attacks. In PHP version below 4.4.2 or 5.1.2 the characters \n\r (LF CR) can be used for header line termination (cross-browser). In PHP below 5.4 the character \r (CR) can still be used for header line termination (Chrome, IE).",
      "remediation": "Update PHP to prevent header injection or implement a whitelist. Additionally strip out control characters like %00, %0D, %0A etc.",
      "link": "https://www.owasp.org/index.php/HTTP_Response_Splitting",
      "example_insecure": "<?php header('Location: '.$_GET['url']); ?>",
      "example_secure": "<?php if(!in_array($_GET['url'], $whitelist)) exit; ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods responsible for setting HTTP headers concatenated with, possibly unstrusted, dynamic content.",
      "signature": "KGhlYWRlclwoKSguKikoW1xzXSpbXlwiXCddKlwkW1x3XSop"
    },
    {
      "id": "PHPRCESI",
      "severity": "Medium",
      "title": "Possible Arbitrary Code Execution",
      "description": "An attacker might execute arbitrary PHP code with this vulnerability. User tainted data is embedded into a function that compiles PHP code on the run and executes it thus allowing an attacker to inject own PHP code that will be executed. This vulnerability can lead to full server compromise.",
      "remediation": "Build a whitelist for positive code with regular expressions (e.g. alphanumeric only) or arrays. Do not try to blacklist for evil PHP code.",
      "link": "https://www.owasp.org/index.php/Code_Injection",
      "example_insecure": "<?php eval('$color = ' . $_GET['color] . ';'); ?>",
      "example_secure": "<?php $colors = array('blue', 'red'); if(!in_array($_GET['color'], $colors)) exit; ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods responsible for interpreting strings as code concatenated with, possibly unstrusted, dynamic content.",
      "signature": "KGFycmF5X2RpZmZfdWFzc29jfGFycmF5X2RpZmZfdWtleXxhcnJheV9maWx0ZXJ8YXJyYXlfaW50ZXJzZWN0X3Vhc3NvY3xhcnJheV9pbnRlcnNlY3RfdWtleXxhcnJheV9tYXB8YXJyYXlfcmVkdWNlfGFycmF5X3VkaWZmfGFycmF5X3VkaWZmX2Fzc29jfGFycmF5X3VkaWZmX3Vhc3NvY3xhcnJheV91aW50ZXJzZWN0fGFycmF5X3VpbnRlcnNlY3RfYXNzb2N8YXJyYXlfdWludGVyc2VjdF91YXNzb2N8YXJyYXlfd2Fsa3xhcnJheV93YWxrX3JlY3Vyc2l2ZXxhc3NlcnR8YXNzZXJ0X29wdGlvbnN8Y2FsbF91c2VyX2Z1bmN8Y2FsbF91c2VyX2Z1bmNfYXJyYXl8Y3JlYXRlX2Z1bmN0aW9ufGRvdG5ldF9sb2FkfGZvcndhcmRfc3RhdGljX2NhbGx8Zm9yd2FyZF9zdGF0aWNfY2FsbF9hcnJheXxlaW9fYnVzeXxlaW9fY2htb2R8ZWlvX2Nob3dufGVpb19jbG9zZXxlaW9fY3VzdG9tfGVpb19kdXAyfGVpb19mYWxsb2NhdGV8ZWlvX2ZjaG1vZHxlaW9fZmNob3dufGVpb19mZGF0YXN5bmN8ZWlvX2ZzdGF0fGVpb19mc3RhdHZmc3xldmFsfGV2ZW50X2J1ZmZlcl9uZXd8ZXZlbnRfc2V0fGl0ZXJhdG9yX2FwcGx5fG1iX2VyZWdfcmVwbGFjZXxtYl9lcmVnaV9yZXBsYWNlfG9iX3N0YXJ0fHByZWdfZmlsdGVyfHByZWdfcmVwbGFjZXxwcmVnX3JlcGxhY2VfY2FsbGJhY2t8cmVnaXN0ZXJfc2h1dGRvd25fZnVuY3Rpb258cmVnaXN0ZXJfdGlja19mdW5jdGlvbnxydW5raXRfbWV0aG9kX2FkZHxydW5raXRfbWV0aG9kX2NvcHl8cnVua2l0X21ldGhvZF9yZWRlZmluZXxydW5raXRfbWV0aG9kX3JlbmFtZXxydW5raXRfZnVuY3Rpb25fYWRkfHJ1bmtpdF9mdW5jdGlvbl9jb3B5fHJ1bmtpdF9mdW5jdGlvbl9yZWRlZmluZXxydW5raXRfZnVuY3Rpb25fcmVuYW1lfHNlc3Npb25fc2V0X3NhdmVfaGFuZGxlcnxzZXRfZXJyb3JfaGFuZGxlcnxzZXRfZXhjZXB0aW9uX2hhbmRsZXJ8c3BsX2F1dG9sb2FkfHNwbF9hdXRvbG9hZF9yZWdpc3RlcnxzcWxpdGVfY3JlYXRlX2FnZ3JlZ2F0ZXxzcWxpdGVfY3JlYXRlX2Z1bmN0aW9ufHN0cmVhbV93cmFwcGVyX3JlZ2lzdGVyfHVhc29ydHx1a3NvcnR8dXNvcnR8eWFtbF9wYXJzZXx5YW1sX3BhcnNlX2ZpbGV8eWFtbF9wYXJzZV91cmwpLiooXFxcJFtcd10qfFwkW1x3XSop"
    },
    {
      "id": "PHPRFISI",
      "severity": "Medium",
      "title": "Possible Remote File Inclusion",
      "description": "An attacker might include local or remote PHP files or read non-PHP files with this vulnerability. User tainted data is used when creating the file name that will be included into the current file. PHP code in this file will be evaluated, non-PHP code will be embedded to the output. This vulnerability can lead to full server compromise.",
      "remediation": "Build a whitelist for positive file names. Do not only limit the file name to specific paths or extensions.",
      "link": "http://websec.wordpress.com/2010/02/22/exploiting-php-file-inclusion-overview/",
      "example_insecure": "<?php include('includes/' . $_GET['file']); ?>",
      "example_secure": "<?php $files = array('index.php', 'main.php'); if(!in_array($_GET['file'], $files)) exit; ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods responsible for reading file inputs and executing the contents as trusted code.",
      "signature": "KGluY2x1ZGV8aW5jbHVkZV9vbmNlfHBhcnNla2l0X2NvbXBpbGVfZmlsZXxwaHBfY2hlY2tfc3ludGF4fHJlcXVpcmV8cmVxdWlyZV9vbmNlfHJ1bmtpdF9pbXBvcnR8c2V0X2luY2x1ZGVfcGF0aHx2aXJ0dWFsKS4qKFxcXCRbXHddKnxcJFtcd10qKQ=="
    },
    {
      "id": "PHPCEXSI",
      "severity": "Medium",
      "title": "Possible Server-Side Command Execution",
      "description": "An attacker might execute arbitrary system commands with this vulnerability. User tainted data is used when creating the command that will be executed on the underlying operating system. This vulnerability can lead to full server compromise.",
      "remediation": "Limit the code to a very strict character subset or build a whitelist of allowed commands. Do not try to filter for evil commands. Try to avoid the usage of system command executing functions if possible.",
      "link": "http://websec.wordpress.com/2010/02/22/exploiting-php-file-inclusion-overview/",
      "example_insecure": "<?php exec('./crypto -mode ' . $_GET['mode']); ?>",
      "example_secure": "<?php $modes = array('r', 'w', 'a'); if(!in_array($_GET['mode'], $modes)) exit; ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods responsible for interpreting strings as valid code and executes them.",
      "signature": "KGJhY2t0aWNrc3xleGVjfGV4cGVjdF9wb3BlbnxwYXNzdGhydXxwY250bF9leGVjfHBvcGVufHByb2Nfb3BlbnxzaGVsbF9leGVjfHN5c3RlbXxtYWlsfG1iX3NlbmRfbWFpbHx3MzJhcGlfaW52b2tlX2Z1bmN0aW9ufHczMmFwaV9yZWdpc3Rlcl9mdW5jdGlvbikuKihcXFwkW1x3XSp8XCRbXHddKik="
    },
    {
      "id": "PHPFSOSI",
      "severity": "Medium",
      "title": "Possibly Risky File System Operation",
      "description": "An attacker might write to arbitrary files or inject arbitrary code into a file with this vulnerability. User tainted data is used when creating the file name that will be opened or when creating the string that will be written to the file. An attacker can try to write arbitrary PHP code in a PHP file allowing to fully compromise the server.",
      "remediation": "Build a whitelist for positive file names. Do not only limit the file name to specific paths or extensions. If you write into PHP files make sure an attacker can not write own PHP code. Use a whitelist with arrays or regular expressions (e.g. alphanumeric only).",
      "link": "http://projects.webappsec.org/w/page/13246932/Improper Filesystem Permissions",
      "example_insecure": "<?php $h = fopen($_GET['file'], 'w'); fwrite($h, $_GET['data']); ?>",
      "example_secure": "<?php $files = array('index.php', 'main.php'); if(!in_array($_GET['file'], $files)) exit; ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods responsible for creating, altering, deleting filesystem.",
      "signature": "KGJ6d3JpdGV8Y2htb2R8Y2hncnB8Y2hvd258Y29weXxkaW9fd3JpdGV8ZWlvX2NobW9kfGVpb19jaG93bnxlaW9fbWtkaXJ8ZWlvX21rbm9kfGVpb19ybWRpcnxlaW9fd3JpdGV8ZWlvX3VubGlua3xlcnJvcl9sb2d8ZXZlbnRfYnVmZmVyX3dyaXRlfGZpbGVfcHV0X2NvbnRlbnRzfGZwdXRjc3Z8ZnB1dHN8ZnByaW50ZnxmdHJ1bmNhdGV8ZndyaXRlfGd6d3JpdGV8Z3pwdXRzfGxvYWRYTUx8bWtkaXJ8bW92ZV91cGxvYWRlZF9maWxlfHBvc2l4X21rbm9kfHJlY29kZV9maWxlfHJlbmFtZXxybWRpcnxzaG1vcF93cml0ZXx0b3VjaHx1bmxpbmt8dmZwcmludGZ8eGRpZmZfZmlsZV9iZGlmZnx4ZGlmZl9maWxlX2JwYXRjaHx4ZGlmZl9maWxlX2RpZmZfYmluYXJ5fHhkaWZmX2ZpbGVfZGlmZnx4ZGlmZl9maWxlX21lcmdlM3x4ZGlmZl9maWxlX3BhdGNoX2JpbmFyeXx4ZGlmZl9maWxlX3BhdGNofHhkaWZmX2ZpbGVfcmFiZGlmZnx5YW1sX2VtaXRfZmlsZSkuKihcXFwkW1x3XSp8XCRbXHddKik="
    },
    {
      "id": "PHPXPISI",
      "severity": "Medium",
      "title": "Possibly XPATH Injection",
      "description": "An attacker might execute arbitrary XPath expressions with this vulnerability. User tainted data is used when creating the XPath expression that will be executed on a XML resource. An attacker can inject own XPath syntax to read arbitrary XML entries.",
      "remediation": "Always embed expected strings into quotes and escape the string with a PHP buildin function before embedding it to the expression. Always embed expected integers without quotes and typecast the data to integer before embedding it to the expression. Escaping data but embedding it without quotes is not safe.",
      "link": "http://packetstormsecurity.org/files/view/33380/Blind_XPath_Injection_20040518.pdf",
      "example_insecure": "<?php $ctx->xpath_eval('//user[name/text()=/'' . $_GET['name'] . '/']/account/text()'); ?>",
      "example_secure": "<?php $ctx->xpath_eval('//user[name/text()=/'' . addslashes($_GET['name']) . '/']/account/text()'); ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods that perform some XPATH operation and have been concatenated with, possibly unstrusted, dymanic content.",
      "signature": "KHhwYXRoX2V2YWx8eHBhdGhfZXZhbF9leHB8eHB0cl9ldmFsKS4qKFxcXCRbXHddKnxcJFtcd10qKQ=="
    },
    {
      "id": "PHPLDPSI",
      "severity": "Medium",
      "title": "Possible LDAP Injection",
      "description": "An attacker might execute arbitrary LDAP expressions with this vulnerability. User tainted data is used when creating a LDAP filter that will be executed on a LDAP server. An attacker can inject own LDAP syntax to read arbitrary LDAP entries.",
      "remediation": "Expected strings are not embedded into quotes in LDAP. Limit the input character set to alphanumeric (if possible) to prevent an injection of filter syntax.",
      "link": "http://www.blackhat.com/presentations/bh-europe-08/Alonso-Parada/Whitepaper/bh-eu-08-alonso-parada-WP.pdf",
      "example_insecure": "<?php ldap_search($ds, $dn, '(&(sn=person)(person='.$_GET['person'].'))'); ?>",
      "example_secure": "<?php if(!preg_match(/'/^[a-z0-9]+$//', $_GET['person'])) exit; ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of methods that perform some LDAP operation and have been concatenated with, possibly unstrusted, dymanic content.",
      "signature": "KGxkYXBfYWRkfGxkYXBfZGVsZXRlfGxkYXBfbGlzdHxsZGFwX3JlYWR8bGRhcF9zZWFyY2gpLiooXFxcJFtcd10qfFwkW1x3XSop"
    },
    {
      "id": "PHPSRLSI",
      "severity": "Medium",
      "title": "Possibly risky unserialize() usage",
      "description": "When userinput is parsed by the unserialize() function an attacker may abuse this by supplying serialized objects that will be used in the current application scope. These objects can only be instances of classes of this application. Several gadgets such as __wakeup() or __destruct() functions of those classes will be automatically called when the object is resurrected during the unserialization and object variables specified by the attacker may lead to vulnerabilities in those gadgets.",
      "remediation": "Prevent using unserialize because it contains much more flaws.",
      "link": "https://media.blackhat.com/bh-us-10/presentations/Esser/BlackHat-USA-2010-Esser-Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits-slides.pdf",
      "example_insecure": "<?php class foo { public $file = 'test.txt'; public $data = 'text'; function __destruct() { file_put_contents($this->file, $this->data); } } $a = unserialize($_GET['s']); ?>",
      "example_secure": "Not available",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds usage of the 'unserialize()' method that where a dynamic content, possibly unstrusted, is passed as an argument.",
      "signature": "KGxkYXBfYWRkfGxkYXBfZGVsZXRlfGxkYXBfbGlzdHxsZGFwX3JlYWR8bGRhcF9zZWFyY2gpLiooXFxcJFtcd10qfFwkW1x3XSop"
    },
    {
      "id": "PHPDBISI",
      "severity": "Medium",
      "title": "Possibly risky DBMS operation",
      "description": "An attacker might execute arbitrary SQL commands on the database server with this vulnerability. User tainted data is used when creating the database query that will be executed on the database management system (DBMS). An attacker can inject own SQL syntax thus initiate reading, inserting or deleting database entries or attacking the underlying operating system depending on the query, DBMS and configuration. ",
      "remediation": "Please make sure no untrusted user input is being passed to the DBMS server without proper sanitization. Always embed expected strings into quotes and escape the string with a PHP buildin function before embedding it to the query. Always embed expected integers without quotes and typecast the data to integer before embedding it to the query. Escaping data but embedding it without quotes is not safe.",
      "link": "https://www.owasp.org/index.php/SQL_Injection",
      "example_insecure": "<?php mysql_query('SELECT * FROM users WHERE id = ' . $_GET['id']); ?>",
      "example_secure": "<?php mysql_query('SELECT * FROM users WHERE id = ' . (int)$_GET['id']); '.'/n'.' mysql_query('SELECT * FROM users WHERE name = /'' . mysql_real_escape_string($_GET['name']) . '/''); ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Searches for methods that handle database related operations and warns the developer",
      "signature": "KGRiYV9vcGVufGRiYV9wb3BlbnxkYmFfaW5zZXJ0fGRiYV9mZXRjaHxkYmFfZGVsZXRlfGRieF9xdWVyeXxvZGJjX2RvfG9kYmNfZXhlY3xvZGJjX2V4ZWN1dGV8ZGIyX2V4ZWN8ZGIyX2V4ZWN1dGV8ZmJzcWxfZGJfcXVlcnl8ZmJzcWxfcXVlcnl8aWJhc2VfcXVlcnl8aWJhc2VfZXhlY3V0ZXxpZnhfcXVlcnl8aWZ4X2RvfGluZ3Jlc19xdWVyeXxpbmdyZXNfZXhlY3V0ZXxpbmdyZXNfdW5idWZmZXJlZF9xdWVyeXxtc3FsX2RiX3F1ZXJ5fG1zcWxfcXVlcnl8bXNxbHxtc3NxbF9xdWVyeXxtc3NxbF9leGVjdXRlfG15c3FsX2RiX3F1ZXJ5fG15c3FsX3F1ZXJ5fG15c3FsX3VuYnVmZmVyZWRfcXVlcnl8bXlzcWxpX3N0bXRfZXhlY3V0ZXxteXNxbGlfcXVlcnl8bXlzcWxpX3JlYWxfcXVlcnl8bXlzcWxpX21hc3Rlcl9xdWVyeXxvY2lfZXhlY3V0ZXxvY2lleGVjdXRlfG92cmltb3NfZXhlY3xvdnJpbW9zX2V4ZWN1dGV8b3JhX2RvfG9yYV9leGVjfHBnX3F1ZXJ5fHBnX3NlbmRfcXVlcnl8cGdfc2VuZF9xdWVyeV9wYXJhbXN8cGdfc2VuZF9wcmVwYXJlfHBnX3ByZXBhcmV8c3FsaXRlX29wZW58c3FsaXRlX3BvcGVufHNxbGl0ZV9hcnJheV9xdWVyeXxhcnJheVF1ZXJ5fHNpbmdsZVF1ZXJ5fHNxbGl0ZV9xdWVyeXxzcWxpdGVfZXhlY3xzcWxpdGVfc2luZ2xlX3F1ZXJ5fHNxbGl0ZV91bmJ1ZmZlcmVkX3F1ZXJ5fHN5YmFzZV9xdWVyeXxzeWJhc2VfdW5idWZmZXJlZF9xdWVyeSkuKihcXFwkW1x3XSp8XCRbXHddKik="
    },
    {
      "id": "PHPFIOSO",
      "severity": "Medium",
      "title": "Possibly untrusted filesystem input",
      "description": "You are probably trying to read input via a local/remote filesystem resource which might be unstrusted. Be cautious while dealing with such data.",
      "remediation": "Based on the context use appropriate escaping/encoding whereever applicable.",
      "link": "N/A",
      "example_insecure": "<?php echo file_get_contents($remote_path); ?>",
      "example_secure": "<?php echo htmlentities(file_get_contents($remote_path)); //XSS Context Only ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of API that allow reading input from a local/remote filesystem resource.",
      "signature": "KGJ6cmVhZHxkaW9fcmVhZHxleGlmX2ltYWdldHlwZXxleGlmX3JlYWRfZGF0YXxleGlmX3RodW1ibmFpbHxmZ2V0c3xmZ2V0c3N8ZmlsZXxmaWxlX2dldF9jb250ZW50c3xmcmVhZHxnZXRfbWV0YV90YWdzfGdsb2J8Z3pyZWFkfHJlYWRkaXJ8cmVhZF9leGlmX2RhdGF8c2NhbmRpcnx6aXBfcmVhZClcKC4qW1wpXSo="
    },
    {
      "id": "PHPSRVSO",
      "severity": "Medium",
      "title": "Possibly untrusted $_SERVER variables input",
      "description": "You are probably trying to read input via a $_SERVER variable which might be unstrusted. Be cautious while dealing with such data.",
      "remediation": "Based on the context use appropriate escaping/encoding whereever applicable.",
      "link": "N/A",
      "example_insecure": "<?php echo $_SERVER['HTTP_USER_AGENT']; ?>",
      "example_secure": "<?php echo htmlentities($_SERVER['HTTP_USER_AGENT']); //XSS Context Only ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of $_SERVER variable inputs",
      "signature": "XCRfU0VSVkVSXFtbXCdcIiddKEhUVFBfUkVGRVJFUnxIVFRQX1VTRVJfQUdFTlR8UEhQX0FVVEhfVVNFUnxRVUVSWV9TVFJJTkcpW1wnXCJdXF0="
    },
    {
      "id": "PHPUSRSO",
      "severity": "Medium",
      "title": "Possibly untrusted user input",
      "description": "You are probably trying to read input via API variable which might be unstrusted. Be cautious while dealing with such data.",
      "remediation": "Based on the context use appropriate escaping/encoding whereever applicable.",
      "link": "N/A",
      "example_insecure": "<?php echo $_GET['q']; ?>",
      "example_secure": "<?php echo htmlentities($_GET['q']); //XSS Context Only ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of $_SERVER variable inputs",
      "signature": "XCQoX0dFVHxfUE9TVHxfQ09PS0lFfF9SRVFVRVNUfF9GSUxFU3xfU0VSVkVSfF9FTlZ8SFRUUF9HRVRfVkFSU3xIVFRQX1BPU1RfVkFSU3xIVFRQX0NPT0tJRV9WQVJTfEhUVFBfUkVRVUVTVF9WQVJTfEhUVFBfUE9TVF9GSUxFU3xIVFRQX1NFUlZFUl9WQVJTfEhUVFBfRU5WX1ZBUlN8SFRUUF9SQVdfUE9TVF9EQVRBfGFyZ2N8YXJndik="
    },
    {
      "id": "PHPSQLSO",
      "severity": "Medium",
      "title": "Possibly risky input from database",
      "description": "You are probably some sort of database. Be careful that your SQL query doesn't contain any user input. And if you reflect the data to user, make sure your perform output encoding in the right context.",
      "remediation": "Based on the context use appropriate escaping/encoding whereever applicable.",
      "link": "N/A",
      "example_insecure": "<?php while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) { printf('ID: %s  Name: %s', $row['id'], $row['name']); } ?>",
      "example_secure": "<?php while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) { printf('ID: %s  Name: %s', htmlentities($row['id']), htmlentities($row['name'])) //XSS Context Only; } ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of database inputs",
      "signature": "KG15c3FsX2ZldGNoX2FycmF5fG15c3FsX2ZldGNoX2Fzc29jfG15c3FsX2ZldGNoX2ZpZWxkfG15c3FsX2ZldGNoX29iamVjdHxteXNxbF9mZXRjaF9yb3d8cGdfZmV0Y2hfYWxsfHBnX2ZldGNoX2FycmF5fHBnX2ZldGNoX2Fzc29jfHBnX2ZldGNoX29iamVjdHxwZ19mZXRjaF9yZXN1bHR8cGdfZmV0Y2hfcm93fHNxbGl0ZV9mZXRjaF9hbGx8c3FsaXRlX2ZldGNoX2FycmF5fHNxbGl0ZV9mZXRjaF9vYmplY3R8c3FsaXRlX2ZldGNoX3NpbmdsZXxzcWxpdGVfZmV0Y2hfc3RyaW5nKS4qKFxcXCRbXHddKnxcJFtcd10qKQ=="
    },
    {
      "id": "PHPCRPSO",
      "severity": "Medium",
      "title": "Insecure Cryptography",
      "description": "You are probably doing some sort of cryptographic operation via insecure API(s). This can be insufficient secrecy, randomization and/or integrity.",
      "remediation": "Based on the situation maintain the highest standard of cryptography by using the correct API(s).",
      "link": "N/A",
      "example_insecure": "<?php md5($file); ?>",
      "example_secure": "<?php hash('sha256', $file); ?>",
      "platform_version": "all",
      "enabled": "true",
      "logic": "Finds patterns of insecure cryptograhpic API(s).",
      "signature": "KGJhc2U2NF9lbmNvZGV8YmFzZTY0X2RlY29kZXxjcmMzMnxjcnlwdHxoYXNofG1kNXxtdF9zcmFuZHxyYW5kfHNoYTF8bXRfc3JhbmR8c3RyX3JvdDEzfG1jcnlwdF9jYmN8bWNyeXB0X2NmYnxtY3J5cHRfY3JlYXRlX2l2fG1jcnlwdF9kZWNyeXB0fG1jcnlwdF9lY2J8bWNyeXB0X2VuY3J5cHR8bWNyeXB0X2dlbmVyaWNfaW5pdHxtY3J5cHRfZ2VuZXJpY3xtY3J5cHRfbW9kdWxlX29wZW58bWNyeXB0X29mYnxtZGVjcnlwdF9nZW5lcmljKVwoLipbXG5cKV0q"
    }
  ]
}